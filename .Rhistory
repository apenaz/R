#### dados EEG ####
require(readr)
eeg <- read.csv("EEG_Data.csv")
eeg <- read.csv("EEG_Data.csv")
par(opar)
# mar = c(bottom , left, top , right) => Aumenta as margens para inserir a legenda
par(mar = c(5, 4, 4, 8))
# ?plot()
plot(F7 ~ TIMESTAMP, data = eeg, xlab = "timestamp", ylab = "regsiter", ylim = c(3900, 4600), main = "EEG", col = '2', type = 'l')
lines(eeg$F3 ~ eeg$TIMESTAMP, col = "3")
lines(eeg$O1 ~ eeg$TIMESTAMP, col = "4")
lines(eeg$O2 ~ eeg$TIMESTAMP, col = "5")
legend("bottomright", legend = c("F7", "F3", "O1", "O2"), col = c(2, 3, 4, 5), lty = 2, lwd = 1, bty = "n")
legend("bottomright", legend = c("F7", "F3", "O1", "O2"), col = c(2, 3, 4, 5), lty = 2, lwd = 1, bty = "n")
par(opar)
# ?hist()
par(mfrow = c(2, 2))
par(opar)
par(opar)
opar <- par()      # make a copy of current settings
par(opar)          # restore original settings
par()              # view current settings
opar <- par()      # make a copy of current settings
par(opar)          # restore original settings
par(opar)
par(opar)
# mar = c(bottom , left, top , right) => Aumenta as margens para inserir a legenda
par(mar = c(5, 4, 4, 8))
# ?plot()
plot(F7 ~ TIMESTAMP, data = eeg, xlab = "timestamp", ylab = "regsiter", ylim = c(3900, 4600), main = "EEG", col = '2', type = 'l')
lines(eeg$F3 ~ eeg$TIMESTAMP, col = "3")
lines(eeg$O1 ~ eeg$TIMESTAMP, col = "4")
lines(eeg$O2 ~ eeg$TIMESTAMP, col = "5")
legend("bottomright", legend = c("F7", "F3", "O1", "O2"), col = c(2, 3, 4, 5), lty = 2, lwd = 1, bty = "n")
par(opar)
# ?hist()
par(mfrow = c(2, 2))
hist(eeg$F7, xlab = "F7", ylim = c(0, 400), main = "", col = "lightgrey")
hist(eeg$F3, xlab = "F3", ylim = c(0, 400), main = "", col = "lightgrey")
hist(eeg$O1, xlab = "O1", ylim = c(0, 400), main = "", col = "lightgrey")
hist(eeg$F3, xlab = "F3", ylim = c(0, 400), main = "", col = "lightgrey")
hist(eeg$O1, xlab = "O1", ylim = c(0, 400), main = "", col = "lightgrey")
hist(eeg$O2, xlab = "O2", ylim = c(0, 400), main = "", col = "lightgrey")
# fatiamento usando TIMESTAMP
range(eeg$TIMESTAMP)
# fatiamento usando TIMESTAMP
range(eeg$TIMESTAMP)
eeg0_3 <- eeg[which(eeg$TIMESTAMP <= 3.0), ]
eeg3_6 <- eeg[which(eeg$TIMESTAMP > 3.0 & eeg$TIMESTAMP <= 6.0), ]
eeg6_9 <- eeg[which(eeg$TIMESTAMP > 6.0 & eeg$TIMESTAMP <= 9.0), ]
eeg9_12 <- eeg[which(eeg$TIMESTAMP > 9.0 & eeg$TIMESTAMP <= 12.0), ]
eeg12_15 <- eeg[which(eeg$TIMESTAMP > 12.0 & eeg$TIMESTAMP <= 15.0), ]
# ?boxplot()
boxplot(eeg0_3$AF3, eeg3_6$AF3, eeg6_9$AF3, eeg9_12$AF3, eeg12_15$AF3, main = "Boxplot AF3")
# usando listas e laços for
slices <- list()
for (i in (1 : 5)){
slices[[i]] <- eeg[which(eeg$TIMESTAMP > (i-1)*3.0 & eeg$TIMESTAMP <= i*3.0), ]
}
boxplot(slices[[1]]$AF3, slices[[2]]$AF3, slices[[3]]$AF3, slices[[4]]$AF3, slices[[5]]$AF3, main = "Boxplot AF3")
nasc = read.csv("Nascimentos_RN.csv")
nasc = read.csv("dados/Nascimentos_RN.csv")
nasc = read.csv("dados/Nascimentos_RN.csv")
nasc = read.csv("dados/Nascimentos_RN.csv",TRUE)
nasc = read.csv2("dados/Nascimentos_RN.csv")
nasc = read.csv2("dados/Nascimentos_RN.csv,col.names")
install.packages(readr)
readr
readr?
??
;
?readr
install.packages("readr")
;
readr?
readr
#### dados EEG ####
require(readr)
#### dados EEG ####
require(readr)
eeg <- read.csv("EEG_Data.csv")
par()              # view current settings
opar <- par()      # make a copy of current settings
par(opar)          # restore original settings
par(opar)
boxplot(slices[[1]]$AF3, slices[[2]]$AF3, slices[[3]]$AF3, slices[[4]]$AF3, slices[[5]]$AF3, main = "Boxplot AF3")
#### dados EEG ####
require(readr)
eeg <- read.csv("EEG_Data.csv")
par()              # view current settings
opar <- par()      # make a copy of current settings
par()              # view current settings
opar <- par()      # make a copy of current settings
par(opar)          # restore original settings
par()              # view current settings
opar <- par()      # make a copy of current settings
par(opar)          # restore original settings
par(opar)
par(opar)
# mar = c(bottom , left, top , right) => Aumenta as margens para inserir a legenda
par(mar = c(5, 4, 4, 8))
# ?plot()
plot(F7 ~ TIMESTAMP, data = eeg, xlab = "timestamp", ylab = "regsiter", ylim = c(3900, 4600), main = "EEG", col = '2', type = 'l')
lines(eeg$F3 ~ eeg$TIMESTAMP, col = "3")
lines(eeg$O1 ~ eeg$TIMESTAMP, col = "4")
lines(eeg$O2 ~ eeg$TIMESTAMP, col = "5")
legend("bottomright", legend = c("F7", "F3", "O1", "O2"), col = c(2, 3, 4, 5), lty = 2, lwd = 1, bty = "n")
par(opar)
par(opar)
# ?hist()
par(mfrow = c(2, 2))
par(mfrow = c(2, 2))
hist(eeg$F7, xlab = "F7", ylim = c(0, 400), main = "", col = "lightgrey")
hist(eeg$F3, xlab = "F3", ylim = c(0, 400), main = "", col = "lightgrey")
hist(eeg$O1, xlab = "O1", ylim = c(0, 400), main = "", col = "lightgrey")
hist(eeg$O2, xlab = "O2", ylim = c(0, 400), main = "", col = "lightgrey")
# fatiamento usando TIMESTAMP
range(eeg$TIMESTAMP)
# fatiamento usando TIMESTAMP
range(eeg$TIMESTAMP)
# fatiamento usando TIMESTAMP
range(eeg$TIMESTAMP)
range(eeg$TIMESTAMP)
range(eeg$TIMESTAMP)
eeg0_3 <- eeg[which(eeg$TIMESTAMP <= 3.0), ]
eeg3_6 <- eeg[which(eeg$TIMESTAMP > 3.0 & eeg$TIMESTAMP <= 6.0), ]
eeg6_9 <- eeg[which(eeg$TIMESTAMP > 6.0 & eeg$TIMESTAMP <= 9.0), ]
eeg9_12 <- eeg[which(eeg$TIMESTAMP > 9.0 & eeg$TIMESTAMP <= 12.0), ]
eeg12_15 <- eeg[which(eeg$TIMESTAMP > 12.0 & eeg$TIMESTAMP <= 15.0), ]
# ?boxplot()
boxplot(eeg0_3$AF3, eeg3_6$AF3, eeg6_9$AF3, eeg9_12$AF3, eeg12_15$AF3, main = "Boxplot AF3")
# usando listas e laços for
slices <- list()
for (i in (1 : 5)){
slices[[i]] <- eeg[which(eeg$TIMESTAMP > (i-1)*3.0 & eeg$TIMESTAMP <= i*3.0), ]
}
View(opar)
View(slices)
for (i in (1 : 5)){
slices[[i]] <- eeg[which(eeg$TIMESTAMP > (i-1)*3.0 & eeg$TIMESTAMP <= i*3.0), ]
}
boxplot(slices[[1]]$AF3, slices[[2]]$AF3, slices[[3]]$AF3, slices[[4]]$AF3, slices[[5]]$AF3, main = "Boxplot AF3")
#### dados EEG ####
require(readr)
nasc <- read.csv("Nascimentos_RN.csv")
nasc <- read.csv("Nascimentos_RN.csv",header = TRUE)
nasc <- read.csv2("Nascimentos_RN.csv",header = TRUE)
nasc <- read_csv("Nascimentos_RN.csv",col_names = FALSE, col_types = NULL)
nasc <- read_csv("Nascimentos_RN.csv",col_names = FALSE)
nasc <- read_csv("Nascimentos_RN.csv")
nasc <- read_csv("Nascimentos_RN.csv")
nasc <- read_csv("Nascimentos_RN2.csv")
nasc
nasc <- read_csv("Nascimentos_RN2.csv",col_names = TRUE)
nasc <- read_csv("Nascimentos_RN2.csv",col_names = TRUE,stringsAsFactors=FALSE)
nasc <- read.csv("Nascimentos_RN2.csv",col_names = TRUE,stringsAsFactors=FALSE)
nasc <- read.csv("Nascimentos_RN2.csv",header = TRUE, stringsAsFactors=FALSE)
x <- read.csv(url, header=FALSE, stringsAsFactors=FALSE,
fileEncoding="latin1", skip=16)
x <- read.csv("Nascimentos_RN.csv", header=FALSE, stringsAsFactors=FALSE,
fileEncoding="WinLatin1", skip=16)
x <- read.csv("Nascimentos_RN.csv", header=FALSE, stringsAsFactors=FALSE,
fileEncoding="Windows-1252", skip=16)
x
plot(2000)
2000
plot(2000, data=x,xlab = "valor sem os municipios")
plot("2000", data = x, xlab = "valor sem os municipios")
nomes = x(1)
x
plot(cars)
plot(cars)
hist(eeg$F7, xlab = "F7", ylim = c(0, 400), main = "", col = "lightgrey")
x <- read.csv("Nascimentos_RN.csv", header=TRUE, stringsAsFactors=FALSE,
fileEncoding="Windows-1252", skip=16)
x
hist(eeg$F3, xlab = "F3", ylim = c(0, 400), main = "", col = "lightgrey")
x <- read.csv("Nascimentos_RN.csv", header=TRUE, stringsAsFactors=FALSE,
x <- read.csv("Nascimentos_RN.csv", header=TRUE, stringsAsFactors=FALSE,
fileEncoding="Windows-1252", skip=16)
;
;
x <- read.csv("Nascimentos_RN.csv", header=TRUE, stringsAsFactors=FALSE,
fileEncoding="Windows-1252", skip=16)
read.csv("Nascimentos_RN.csv", header=TRUE, stringsAsFactors=FALSE,fileEncoding="Windows-1252", skip=16)
read.csv("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252")
read.csv("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF-8
read.csv("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252"); # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF-8
View(eeg)
View(eeg)
View(eeg3_6)
View(nasc)
View(nasc)
nasc <- read.csv("Nascimentos_RN.csv", header=TRUE, fileEncoding="Windows-1252")
nasc <- read.csv("Nascimentos_RN.csv", header=TRUE, stringsAsFactors=FALSE,fileEncoding="Windows-1252")
nasc <- read.csv("Nascimentos_RN.csv", header=TRUE, stringsAsFactors=FALSE,
fileEncoding="Windows-1252", skip=16)
nasc <- read.csv("Nascimentos_RN.csv", header=TRUE, fileEncoding="Windows-1252")
nasc <- read.csv("Nascimentos_RN.csv", header=TRUE, stringsAsFactors=FALSE,
fileEncoding="Windows-1252", skip=16)
#### dados EEG ####
require(readr)
eeg <- read_csv("Nascimentos_RN.csv", fileEncoding="Windows-1252")
eeg <- read_csv("Nascimentos_RN.csv", fileEncoding="Windows-1252")
nascimento = read.csv("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF-8
nascimento = read.csv("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF-8
nascimento = read.csv("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF-8
nascimento = read.csv("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF```
nascimento = read.csv("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF
nascimento = read.csv("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF
nascimento = read.csv("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF
nasc
nascimento
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF
nascimento
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF; usado o read.csv2 devido o separador ser o ";""
nascimento$X2013(1)-nascimento$X2014(1)
nascimento$X2013(2)-nascimento$X2014(2)
nascimento$X2013[2]-nascimento$X2014[2]
nascimento$X2013[5]-nascimento$X2014[5]
nascimento$X2013[5]
nascimento$Município
nascimento$Município[1]
nascimento$Município
nascimento$Município(1)
nascimento$Município[2]
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF; usado o read.csv2 devido o separador ser o ";""
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF; usado o read.csv2 devido o separador ser o ";""
View(nascimento)
View(nascimento)
nascimento$Município[1]
nascimento$X1994
nascimento$X1994;
x94 = nascimento$X1994;
x94
x94 = nascimento$X1995 - nascimento$X1994
x94 = nascimento$X1995
x94 = nascimento$X1995
x95 = nascimento$X1994
x9594 = x95-x94
x9594
x95
x95[1]-x94[1]
Ops.factor(x95-x94)
Ops.factor(x95[1])
# Podem receber argumentos
a <- rep("Aluno",times=3)
a
# Funcao c() : concatenate
number <- c(1, 2, 3, 4, 5)
letter <- c("x", "y", "z", "w", "j")
logico <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
seq <- 1:10
seq <- c(1L, 2L, 3L, 4L, 5L)
complexo <- 4i
# Funcao vector(): cria vetores
a <- vector(mode = "integer", length = 10)
b <- vector("logical", 10)
c <- numeric(10)
d <- character(10)
e <- complex(10)                # os vetores sao criados com valores padrao de cada classe
x <- 1                          # numeros sao salvos como numeric
x <- 1L                         # para explicitar integer, usa-se L
# Hierarquia de classes
x <- c(1, 2, 3)                 # numeric
y <- c("1", "2", "3")           # character
x <- c(TRUE, FALSE, FALSE)      # logical
y <- c("TRUE", "FALSE", "FALSE") # character
# Ex.2: verifique a classe de cada objeto
a <- c(1, "a", TRUE)
b <- c(1, "a")
c <- c(1, T)
d <- c("a", T)
sum(logico)           #Podemos somar vetores logicos
# Coercao de objetos usando funcoes do tipo as.algumacoisa()
x <- 0:10
x
class(x)
a <- as.numeric(x)
a
class(a)
b <- as.character(x)
b
class(b)
c <- as.logical(x)
c
class(c)
#Ex.3: verifique se "x" e "a" sao iguais
identical(a, x)
#Ex.3: verifique se "x" e "a" sao iguais
identical(a, x)
#Ex.4: tente converter o vetor b em numeric
b <- as.numeric(b)
# Vetores de NA
x <- c(1, 2, 3, NA)
# Vetores de NA
x <- c(1, 2, 3, NA)
y <- c("a", "b", "c", NA)
is.na(x)
is.numeric(a)
is.logical(c)
a <- c(1, 3, NA, 7, 9)
sum(a)
sum(a, na.rm=TRUE)
# Objetos possuem atributos: classe, tamanho, dimensoes, nomes, etc
x <- 1:5
x
length(x)
dim(x)
attributes(x)
names(x) <- c("a", "b", "c", "d", "e")
x
# Objetos possuem atributos: classe, tamanho, dimensoes, nomes, etc
x <- 1:5
x
length(x)
dim(x)
attributes(x)
names(x) <- c("a", "b", "c", "d", "e")
x
attributes(x)
x <- factor(c("s", "n", "n", "s", "s"))
x
z <- factor(c("alto", "baixo", "medio"))
x94 = .as.numeric(nascimento$X1995)
x94 = as.numeric(nascimento$X1995)
```{r}
x94 = as.numeric(nascimento$X1995)
x95 = as.numeric(nascimento$X1994)
x94
x94[1]
x94[1]x95[1]
x94[1]-x95[1]
x94[1]
x95[1]
x94[1]-x95[1]
x94 = nascimento$X1995
x95 = nascimento$X1994
x94[1]
x95[1]
x94[1]-x95[1]
x94
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF; usado o read.csv2 devido o separador ser o ";""
x94 = nascimento$X1995
x94
x95 = as.numeric(nascimento$X1994)
x94 = as.numeric(nascimento$X1994)
x94 = as.numeric(nascimento$X1994)
x94
x94 = nascimento$X1995
x94
x94 = nascimento$X1995
x94
x94 = as.numeric(nascimento$X1994)
x94
x94 = nascimento$X1995
x94 = nascimento$X1994
x94
x94 = as.numeric(nascimento$X1994)
x94
x94 = nascimento$X1994
x94[1]
x95 = nascimento$X1995
x94[1]-x95[1]
dif = x94[1]-x95[1]
x94 = nascimento$X1994
x95 = nascimento$X1995
dif = x94[1]-x95[1]
dif
dif = as.numeric(x94[1])-as.character.numeric_version(x95[1])
as.numeric_version
dif = as.numeric_version(x94[1])-as.numeric_version(x95[1])
dif = as.numeric_version(x94[1])-as.numeric_version(x95[1])
x94 = nascimento$X1994
x95 = nascimento$X1995
dif = as.numeric(x94[1])-as.numeric(x95[1])
dif
x94 = nascimento$X1994
x94
as.numeric(x94)
as.integer(x94)
x94[1]
x94 = nascimento$X1994
x94[1]
x94 = nascimento$X1994
as.integer(x94)
x94 = nascimento$X1994
x94
as.integer(x94)
x95
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF; usado o read.csv2 devido o separador ser o ";""
x94 = nascimento$X1994
x94
as.integer(x94)
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF; usado o read.csv2 devido o separador ser o ";""
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF; usado o read.csv2 devido o separador ser o ";""
x94 = nascimento$X1994
x94
as.double(x94)
x94
as.numeric(x94)
x94 = nascimento$X1994
x94 = nascimento$X1994
x94
as.double(x94)
as.numeric(x94)
x94 = nascimento$X1994
x94
as.double(x94)
x94 = nascimento$X1994
x94
x94[1]
x94[1]+1
as.numeric_version(x94[1])
as.numeric_version(x94[1])
?as.numeric
factor(x94[1])
factor(x94[1])+1
as.numeric(factor(x94[1]))
as.numeric(factor(x94[1]))
as.numeric(levels(x94))[1]
as.numeric(levels(x94))
as.numeric(factor(x94[1]))
as.numeric(factor(x94[1]))
as.numeric(levels(factor(x94[1])))
x94
as.numeric(levels(x94))
as.numeric(factor(levels(x94[1])))
as.double(factor(levels(x94[1])))
as.double((levels(x94[1]))
as.double((x94[1]))
as.double(x94[1])
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252", numeric()) # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF; usado o read.csv2 devido o separador ser o ";""
x94 = nascimento$X1994
x94
as.numeric(levels(x94))
as.numeric(levels(x94[1]))
as.double(x94[1])
as.double(x94[1]L)
as.numeric((x94[1]))
as.double(x94[1])
for
attributes(x94)
as.double(x94[1])
x94 = nascimento$X1994
attributes(x94)
factor(x94)
factor(x94)[1]
factor(x94)[1]
as.numeri(factor(x94)[1])
as.numeric(factor(x94)[1])
as.numeric(factor(x94)[1])
as.numeric(factor(x94[1]))
as.numeric(factor(x94[17]))
attributes(x94)
attributes(x94[1])
x94 = nascimento$X1994
x94
x94[1]
attributes(x94[1])
x94[1]
x94
x94[1]
x94[1](1)
x94[1](1:)
x94[1](1:1)
x94[1][1]
x94
x94[1][1]
x94[1][1][1]
x94[1][1][1][1]
x94[1][1][1][1]
x94[1]
length(x94[1])
x94[1]
length(x94[1])
attributes(x94[1])
length(x94[1])
attributes(x94[1])
x94
as.numeric(paste(x94))
as.numeric(paste(nascimento$X1994))
attributes(nascimento$X1994)
as.numeric(paste(nascimento$X1994))
as.numeric(nascimento$X1994)
attributes(nascimento$X1994)
as.numeric(levels(nascimento$X1994)[17]
as.numeric(levels(nascimento$X1994)[17];
as.numeric(levels(nascimento$X1994)[17];
as.numeric(levels(nascimento$X1994)[17])
as.numeric(levels(nascimento$X1994))
attributes(nascimento$X1994)
attributes(nascimento$X1994$levels[17])
attributes(nascimento$X1994$levels)
attributes(nascimento$X1994$)
attributes(nascimento$X1994$)
as.numeric(levels(nascimento$X1994))
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF; usado o read.csv2 devido o separador ser o ";""
nascimento$Município[2]
as.numeric(levels(nascimento$X1994))[nascimento$X1994]
as.numeric(levels(nascimento$X1994))[17]
as.numeric(levels(nascimento$X1994))[16]
as.numeric(levels(nascimento$X1994))[17]
as.numeric(levels(nascimento$X1994))[15]
as.numeric(levels(nascimento$X1994))[nascimento$X1994]
require(readr)
nascimento = read.csv2("Nascimentos_RN.csv", header=TRUE,fileEncoding="Windows-1252") # fileEncoded indica o padrão que foi usado na codificação dos caracteres. o mais comum e windows ou UTF; usado o read.csv2 devido o separador ser o ";""
nascimento$Município[2]
as.numeric(levels(nascimento$X1994))[nascimento$X1994]
nascimento$X1994
nascimento$X1994[1]
nascimento$X1994[1]+1000
